local PlayersService = findservice(Game, "Players")
local Workspace = findservice(Game, "Workspace")

local weaponMarkers = {
    Killer = {
        weapons = {"Sawn-off", "K1911", "RR-LightCompactPistolS", "JS2-Derringy", "KOLT-AR15", "JS-22", "KamatovS", "RY's GG-17", "AT's KAR15", "VK's ANKM"},
        color = {255, 0, 0},  
        label = "KILLER",
        size = 14
    },
    Sheriff = {
        weapons = {"RR-Snubby", "GG-17", "IZVEKH-412", "RR-40", "IZVEKH-412"},
        color = {0, 0, 255},  
        label = "SHERIFF",
        size = 16
    }
}

local categoryOrder = {"Killer", "Sheriff"}

local ESP_SETTINGS = {
    Generator = {
        text = "GENERATOR",
        color = {0, 255, 0},  
        size = 14
    },
    offsets = {
        player = 30,
        generator = 15
    }
}

local cached = {
    ArmedPlayers = {},
    Generators = {},
    ESPs = {},
    GeneratorESPs = {}
}


local function tableFind(tbl, value)
    for _, v in ipairs(tbl) do
        if v == value then
            return true
        end
    end
    return false
end

local function getWeaponCategory(toolName)
    for _, categoryName in ipairs(categoryOrder) do
        local category = weaponMarkers[categoryName]
        if tableFind(category.weapons, toolName) then
            return categoryName
        end
    end
    return nil
end

local function findHighestPriorityWeapon(container)
    if not container then return nil end
    
    local highestPriority = math.huge
    local bestCategory = nil

    for _, tool in ipairs(getchildren(container)) do
        if getclassname(tool) == "Tool" then
            local toolName = getname(tool)
            local category = getWeaponCategory(toolName)
            
            if category then
                local priority = table.find(categoryOrder, category) or math.huge
                if priority < highestPriority then
                    highestPriority = priority
                    bestCategory = category
                end
            end
        end
    end
    
    return bestCategory
end


local function updateArmedPlayersList()
    local newArmed = {}


    for _, player in ipairs(getchildren(PlayersService)) do
        local backpack = findfirstchild(player, "Backpack")
        local character = getcharacter(player)
        
        local backpackCategory = findHighestPriorityWeapon(backpack)
        local charCategory = findHighestPriorityWeapon(character)
        
        local finalCategory = backpackCategory
        if charCategory then
            local charPriority = table.find(categoryOrder, charCategory) or math.huge
            local currentPriority = table.find(categoryOrder, backpackCategory) or math.huge
            if charPriority < currentPriority then
                finalCategory = charCategory
            end
        end

        if finalCategory then
            newArmed[getname(player)] = finalCategory
        end
    end


    local npcFolder = findfirstchild(Workspace, "NPCSFolder")
    if npcFolder then
        for _, npc in ipairs(getchildren(npcFolder)) do
            local category = findHighestPriorityWeapon(npc)
            if category then
                newArmed[getname(npc)] = category
            end
        end
    end

    cached.ArmedPlayers = newArmed
end

local function updateGeneratorsList()
    local bloodFolder = findfirstchild(Workspace, "BloodFolder")
    if not bloodFolder then return end

    cached.Generators = {}
    for _, mapFolder in ipairs(getchildren(bloodFolder)) do
        local gensFolder = findfirstchild(mapFolder, "Generators")
        if gensFolder then
            for _, gen in ipairs(getchildren(gensFolder)) do
                if getname(gen) == "GENERATOERINTER" then
                    table.insert(cached.Generators, gen)
                end
            end
        end
    end
end


local function renderPlayerESPs()
    local currentESPs = {}
    local targets = {}


    local npcFolder = findfirstchild(Workspace, "NPCSFolder")
    if npcFolder then
        for _, npc in ipairs(getchildren(npcFolder)) do
            targets[getname(npc)] = npc
        end
    end

    for _, player in ipairs(getchildren(PlayersService)) do
        local char = getcharacter(player)
        if char then targets[getname(player)] = char end
    end


    for name, target in pairs(targets) do
        local rootPart = findfirstchild(target, "HumanoidRootPart")
        local categoryName = cached.ArmedPlayers[name]
        
        if rootPart and categoryName then
            local pos = getposition(rootPart)
            local screenPos, onScreen = worldtoscreenpoint({pos.x, pos.y, pos.z})
            
            if onScreen then
                local category = weaponMarkers[categoryName]
                currentESPs[name] = {
                    text = category.label,
                    color = category.color,
                    size = category.size,
                    position = {screenPos.x, screenPos.y - ESP_SETTINGS.offsets.player}
                }
            end
        end
    end


    for name, esp in pairs(cached.ESPs) do
        if not currentESPs[name] then
            esp:Remove()
            cached.ESPs[name] = nil
        end
    end


    for name, data in pairs(currentESPs) do
        if not cached.ESPs[name] then
            local newESP = Drawing.new("Text")
            newESP.Text = data.text
            newESP.Color = data.color
            newESP.Size = data.size
            newESP.Center = true
            newESP.Outline = true
            newESP.Visible = true
            cached.ESPs[name] = newESP
        end
        cached.ESPs[name].Position = data.position
    end
end

local function renderGeneratorESPs()
    local currentGens = {}


    for _, gen in ipairs(cached.Generators) do
        local pos = getposition(gen)
        local screenPos, onScreen = worldtoscreenpoint({pos.x, pos.y, pos.z})
        
        if onScreen then
            table.insert(currentGens, {
                position = {screenPos.x, screenPos.y - ESP_SETTINGS.offsets.generator},
                instance = gen
            })
        end
    end


    for gen, esp in pairs(cached.GeneratorESPs) do
        if not table.find(currentGens, gen) then
            esp:Remove()
            cached.GeneratorESPs[gen] = nil
        end
    end


    for _, data in ipairs(currentGens) do
        local gen = data.instance
        if not cached.GeneratorESPs[gen] then
            local newESP = Drawing.new("Text")
            newESP.Text = ESP_SETTINGS.Generator.text
            newESP.Color = ESP_SETTINGS.Generator.color
            newESP.Size = ESP_SETTINGS.Generator.size
            newESP.Center = true
            newESP.Outline = true
            newESP.Visible = true
            cached.GeneratorESPs[gen] = newESP
        end
        cached.GeneratorESPs[gen].Position = data.position
    end
end


local function eternalLoop()
    while true do
        local success, err = pcall(function()
            while true do
                updateArmedPlayersList()
                updateGeneratorsList()
                renderPlayerESPs()
                renderGeneratorESPs()
                wait(0.03)
            end
        end)
        
        if not success then
            print("Critical error, restarting:", err)
            wait(1)  
        end
    end
end


spawn(eternalLoop)
